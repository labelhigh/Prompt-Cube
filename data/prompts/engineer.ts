import type { Prompt } from '../../types';

export const engineerPrompts: Prompt[] = [
    {
        id: 2,
        title: "SQL 查詢生成與解釋",
        description: "用自然語言描述您想查詢的數據，AI 會為您生成對應的 SQL 查詢語法並提供解釋。",
        content: "我有一個資料表叫做 [表格名稱]，欄位包含 [欄位1], [欄位2], [欄位3]。我想要 [你想要查詢的目標，例如：找出欄位1中值為'特定值'且欄位2大於100的所有紀錄]。請為我生成對應的 SQL 查詢語法，並逐行解釋其作用。",
        variables: ["[表格名稱]", "[欄位1], [欄位2], [欄位3]", "[你想要查詢的目標]"],
        roleCategory: '工程師',
        purposeCategory: '程式碼輔助',
        sourceUrl: "https://example.com/prompt/2",
        usageInstructions: "提供您的表格結構和查詢需求，即可快速獲得 SQL 程式碼，適合初學者或需要快速查詢的開發者。",
        exampleOutput: "```sql\nSELECT *\nFROM [表格名稱]\nWHERE [欄位1] = '特定值' AND [欄位2] > 100;\n```\n\n**解釋:**\n- `SELECT *`: 選取所有欄位的資料。\n- `FROM [表格名稱]`: 從您指定的表格中查詢。\n- `WHERE [欄位1] = '特定值' AND [欄位2] > 100`: 設定篩選條件，找出符合兩個條件的紀錄。",
        tags: ["SQL", "資料庫", "程式碼生成"],
        saves: 2345,
        isEditorsPick: true,
        isWeeklyHot: true,
        createdAt: "2024-07-21T11:00:00Z",
    },
    {
        id: 5,
        title: "Python 程式碼註解與優化建議",
        description: "貼上您的 Python 程式碼，AI 會為其添加清晰的註解，並提供可行的優化建議。",
        content: "你是一位資深的 Python 開發者，擅長撰寫乾淨且高效的程式碼。請分析以下這段 Python 程式碼，並完成兩項任務：\n1. 為程式碼逐行或逐段添加清晰易懂的中文註解。\n2. 提出至少兩點關於程式碼效能、可讀性或最佳實踐的具體優化建議。\n\n```python\n[貼上你的 Python 程式碼]\n```",
        variables: ["[貼上你的 Python 程式碼]"],
        roleCategory: '工程師',
        purposeCategory: '程式碼輔助',
        sourceUrl: "https://example.com/prompt/5",
        usageInstructions: "幫助您快速理解舊有程式碼或提升程式碼品質，直接貼上程式碼片段即可。",
        exampleOutput: "```python\n# 遍歷數字 1 到 100\nfor i in range(1, 101):\n  # 檢查是否同時是 3 和 5 的倍數\n  if i % 3 == 0 and i % 5 == 0:\n    print('FizzBuzz')\n  # ... (其餘程式碼)\n```\n\n**優化建議:**\n1. **減少重複計算:** `i % 3` 和 `i % 5` 在多個判斷中重複出現，可以先存成變數。\n2. **提升可讀性:** 可以將判斷邏輯封裝成一個函式，主程式只做迴圈呼叫，更符合單一職責原則。",
        tags: ["Python", "Code Review", "優化"],
        saves: 1890,
        isEditorsPick: false,
        isWeeklyHot: true,
        createdAt: "2024-07-22T15:00:00Z",
    },
    {
        id: 246,
        title: "新技術/框架可行性評估報告",
        description: "針對一項新技術、框架或工具，生成一份結構化的技術可行性評估報告，幫助團隊做出明智的技術選型決策。",
        content: "你是一位資深架構師。我正在評估是否要在我們的專案中引入 [新技術/框架名稱]。請為我撰寫一份技術可行性評估報告的框架，內容需包含：\n1.  **技術簡介：** 它是什麼？解決什麼核心問題？\n2.  **優點 (Pros):** 它能為我們帶來哪些好處？(例如：開發效率、性能、社群支援)\n3.  **缺點 (Cons):** 可能會有哪些風險或缺點？(例如：學習曲線、穩定性、維護成本)\n4.  **與現有技術棧的整合性：** 它與我們目前的 [現有技術棧，例如：React, Java] 整合的難易度如何？\n5.  **團隊技能匹配度：** 我們團隊目前的技能是否能快速上手？\n6.  **初步結論與建議：** 綜合來看，你建議我們採用、觀望還是放棄？",
        variables: ["[新技術/框架名稱]", "[現有技術棧]"],
        roleCategory: '工程師',
        purposeCategory: '策略規劃',
        sourceUrl: "https://example.com/prompt/246",
        usageInstructions: "當團隊在考慮引入新工具時，使用此提示詞可以進行一次全面的、無偏見的分析，避免盲目追逐潮流。",
        exampleOutput: "**[新技術/框架名稱] 可行性評估報告**\n\n1. **技術簡介：** Svelte 是一個前端編譯器，它在建置階段就將組件轉換為高效的命令式程式碼...\n2. **優點：** 無虛擬 DOM，性能極高；打包體積小；語法簡潔。\n3. **缺點：** 生態系相對 Vue/React 較小；社群招募可能較困難。\n4. **整合性：** 可以與現有的打包工具 (Webpack/Vite) 良好整合，但與舊有 React 組件共存需要額外配置。\n5. **團隊技能：** 團隊成員熟悉 JavaScript 基礎，學習曲線相對平緩。\n6. **結論：** 建議在新專案或非核心模組中進行試點，以評估其在生產環境中的穩定性。",
        tags: ["技術選型", "可行性分析", "架構", "研究"],
        saves: 1580,
        isEditorsPick: true,
        isWeeklyHot: true,
        createdAt: "2024-08-20T10:00:00Z",
    },
    {
        id: 247,
        title: "開源函式庫選型比較分析",
        description: "針對特定需求，比較 2-3 個主流開源函式庫，並提供選型建議。",
        content: "你是一位資深軟體工程師。我需要為 [特定需求，例如：JavaScript 的日期處理] 選擇一個開源函式庫。請幫我比較以下幾個選項：[函式庫 A], [函式庫 B], [函式庫 C]。請以表格形式，從以下維度進行比較：\n- **功能完整性**\n- **性能**\n- **文件品質**\n- **社群活躍度 (GitHub stars, a good proxy)**\n- **打包體積 (Bundle size)**\n- **維護狀態**\n最後，請根據我們的需求，給出你的最終選型建議。",
        variables: ["[特定需求]", "[函式庫 A]", "[函式庫 B]", "[函式庫 C]"],
        roleCategory: '工程師',
        purposeCategory: '策略規劃',
        sourceUrl: "https://example.com/prompt/247",
        usageInstructions: "避免重複造輪子，也避免選錯輪子。這個提示詞能幫助你做出更可靠的技術決策。",
        exampleOutput: "| 維度 | Moment.js | Day.js | date-fns |\n|---|---|---|---|\n| 功能完整性 | 非常完整 | 較精簡 | 模組化 |\n| 性能 | 較差 | 極佳 | 佳 |\n| 打包體積 | 大 (290kb) | 極小 (2kb) | 小 (依引用) |\n| ... | ... | ... | ... |\n\n**結論：** 如果專案對打包體積和性能有嚴格要求，Day.js 是最佳選擇。如果需要處理複雜的時區和國際化問題，且不在意體積，Moment.js 仍是個選項。",
        tags: ["開源", "函式庫", "技術選型"],
        saves: 1240,
        isEditorsPick: false,
        isWeeklyHot: false,
        createdAt: "2024-08-20T11:00:00Z",
    },
    {
        id: 248,
        title: "API 設計模式研究與最佳實踐",
        description: "總結 RESTful, GraphQL, gRPC 等主流 API 設計模式的優缺點與適用場景。",
        content: "請扮演一位 API 設計專家。請為我總結和比較以下三種主流的 API 設計模式：RESTful, GraphQL, 和 gRPC。\n請從以下幾個角度進行分析：\n1.  **核心理念與數據交換格式。**\n2.  **優點是什麼？**\n3.  **缺點是什麼？**\n4.  **最適合的使用場景分別是什麼？**\n請以清晰的條列式或表格呈現。",
        variables: [],
        roleCategory: '工程師',
        purposeCategory: '策略規劃',
        sourceUrl: "https://example.com/prompt/248",
        usageInstructions: "幫助團隊在專案初期，就能根據業務需求，選擇最合適的 API 架構。",
        exampleOutput: "**GraphQL**\n- **理念：** 前端驅動的查詢語言，客戶端可以精確地請求所需的數據。\n- **優點：** 解決了 Over-fetching 和 Under-fetching 的問題；強型別系統。\n- **缺點：** 伺服器端實現較複雜；緩存策略較 REST 複雜。\n- **適用場景：** 複雜的前端應用，數據來源多樣；行動應用程式，需要節省網路流量。",
        tags: ["API", "REST", "GraphQL", "gRPC", "架構"],
        saves: 2100,
        isEditorsPick: true,
        isWeeklyHot: true,
        createdAt: "2024-08-20T12:00:00Z",
    },
    {
        id: 249,
        title: "競爭對手產品技術棧分析",
        description: "分析特定網站或應用程式可能使用的前端與後端技術棧。",
        content: "你是一位逆向工程專家。請幫我分析網站 [網站 URL] 或應用程式 [應用程式名稱] 可能使用了哪些技術棧。請從前端框架、後端語言、Web 伺服器、資料庫、CDN、以及任何可識別的第三方服務等方面進行推測，並說明你的判斷依據。",
        variables: ["[網站 URL]", "[應用程式名稱]"],
        roleCategory: '工程師',
        purposeCategory: '數據分析',
        sourceUrl: "https://example.com/prompt/249",
        usageInstructions: "透過分析競爭對手的技術選型，可以了解其技術成熟度與開發策略，作為自身規劃的參考。",
        exampleOutput: "**網站: producthunt.com 分析**\n- **前端框架:** Next.js (從頁面原始碼中的 `__NEXT_DATA__` 全域變數可以判斷)。\n- **後端語言:** 很可能是 Node.js，因為 Next.js 的 SSR 特性。\n- **CDN:** Cloudflare (從 HTTP 回應標頭的 `server: cloudflare` 可見)。\n- **第三方服務:** 使用 Algolia 進行搜尋 (從網路請求中可以看到對 `algolia.net` 的呼叫)。",
        tags: ["技術棧", "競品分析", "逆向工程"],
        saves: 1750,
        isEditorsPick: false,
        isWeeklyHot: true,
        createdAt: "2024-08-20T13:00:00Z",
    },
    {
        id: 250,
        title: "雲端服務供應商效能與成本比較",
        description: "針對特定雲端運算需求，比較 AWS, GCP, Azure 三大供應商的對應服務。",
        content: "你是一位雲端解決方案架構師。我有一個需求：[請描述你的雲端運算需求，例如：部署一個需要自動擴展的容器化應用程式]。請幫我比較 AWS, GCP, Azure 三大雲端平台針對此需求的解決方案。比較應包含：\n1. **核心服務名稱：** (例如：AWS 的 EKS, GCP 的 GKE, Azure 的 AKS)\n2. **主要優點：** 各平台的獨特優勢是什麼？\n3. **定價模型簡述：** 計費方式有何不同？\n4. **生態系與整合性：** 與其他服務的整合程度如何？\n5. **綜合建議：** 基於我的需求，你會優先推薦哪個平台？為什麼？",
        variables: ["[你的雲端運算需求]"],
        roleCategory: '工程師',
        purposeCategory: '策略規劃',
        sourceUrl: "https://example.com/prompt/250",
        usageInstructions: "在雲端供應商的選擇上，做出最符合成本效益與技術發展的決策。",
        exampleOutput: "**需求：容器化應用程式部署**\n\n- **AWS - EKS (Elastic Kubernetes Service):**\n  - **優點：** 生態系最成熟，與 AWS 其他服務 (如 IAM, VPC) 深度整合，社群資源豐富。\n  - **定價：** 控制平面按小時收費，工作節點按 EC2 實例收費。\n\n- **GCP - GKE (Google Kubernetes Engine):**\n  - **優點：** Kubernetes 的原生開發者，對 K8s 的支援最好，自動駕駛模式 (Autopilot) 能大幅簡化維運。\n  - **定價：** Autopilot 模式下按 Pod 資源請求計費，標準模式類似 EKS。\n\n- **Azure - AKS (Azure Kubernetes Service):**\n  - **優點：** 與微軟生態系 (如 Azure AD, GitHub Actions) 整合緊密，對 Windows 容器支援佳。\n  - **定價：** 控制平面免費，僅需支付工作節點費用。",
        tags: ["雲端運算", "AWS", "GCP", "Azure", "成本優化"],
        saves: 1980,
        isEditorsPick: true,
        isWeeklyHot: false,
        createdAt: "2024-08-20T14:00:00Z",
    },
    {
        id: 256,
        title: "程式碼審查 (Code Review) 建議產生器",
        description: "貼上一段程式碼，AI 會從可讀性、效能、安全性、最佳實踐等多個角度提供建設性的 Code Review 建議。",
        content: "你是一位經驗豐富的軟體架構師，擅長進行程式碼審查。請審查以下這段 [程式語言] 程式碼，並從可讀性、效能、潛在的 Bug、安全性、以及是否遵循最佳實踐等角度，提供至少 3 條具體、有建設性的改進建議。請以友善、引導思考的語氣提出。\n\n```[程式語言]\n[請貼上你的程式碼]\n```",
        variables: ["[程式語言]", "[請貼上你的程式碼]"],
        roleCategory: '工程師',
        purposeCategory: '程式碼輔助',
        sourceUrl: "https://example.com/prompt/256",
        usageInstructions: "提升團隊程式碼品質的利器，也可用於自我檢查，在提交 PR 前發現潛在問題。",
        exampleOutput: "**程式碼審查建議：**\n\n這段程式碼的功能實現得很棒！我有幾個想法或許能讓它更完美：\n1.  **(可讀性)** 我看到變數 `d` 在程式中代表『資料』。為了讓其他同事更容易理解，我們是否可以考慮將它命名得更具描述性，例如 `userData` 或 `fetchedData` 呢？\n2.  **(效能)** 這裡的迴圈內有資料庫查詢，這可能會導致 N+1 問題。我們是否能將查詢移到迴圈外，一次性獲取所有需要的資料？\n3.  **(錯誤處理)** `try...catch` 區塊目前只記錄了錯誤日誌。我們是否需要考慮加入一個重試機制，或者向用戶顯示一個更友善的錯誤訊息？",
        tags: ["Code Review", "程式碼品質", "最佳實踐"],
        saves: 2400,
        isEditorsPick: true,
        isWeeklyHot: true,
        createdAt: "2024-08-21T10:00:00Z",
    },
    {
        id: 257,
        title: "技術設計文件 (TDD) 範本產生器",
        description: "為一個新功能或系統，生成一份結構完整的技術設計文件 (Technical Design Document) 範本。",
        content: "請為我生成一份技術設計文件 (TDD) 的範本。這份文件是為了一個新專案：[專案/功能名稱]。範本需要包含以下關鍵部分：\n1.  **背景與目標：** 要解決什麼問題？技術目標是什麼？\n2.  **範圍：** 包含哪些功能？不包含哪些？\n3.  **高階設計 (High-Level Design):** 系統架構圖與模組劃分。\n4.  **低階設計 (Low-Level Design):** 核心模組的資料庫 Schema、API 規格、關鍵演算法。\n5.  **安全性考量：** 可能有哪些安全風險？如何應對？\n6.  **監控與告警：** 需要監控哪些關鍵指標？\n7.  **未決策事項：** 還有哪些待討論的技術決策？",
        variables: ["[專案/功能名稱]"],
        roleCategory: '工程師',
        purposeCategory: '策略規劃',
        sourceUrl: "https://example.com/prompt/257",
        usageInstructions: "在動手寫程式碼前，一份好的設計文件能確保團隊方向一致，並提前發現潛在問題。",
        exampleOutput: "**技術設計文件：[專案名稱]**\n\n**1. 背景與目標：**\n   - 為了解決 [問題]，我們需要建立一個 [系統]，技術目標是達到 [指標，例如：99.9% 可用性]。\n\n**2. 範圍：**\n   - **In-Scope:** [功能 A, B]\n   - **Out-of-Scope:** [功能 C]\n\n**3. 高階設計：**\n   - (此處可附上架構圖) 系統將採用微服務架構，包含使用者服務、訂單服務...\n\n...",
        tags: ["TDD", "技術文件", "架構設計", "文件"],
        saves: 1800,
        isEditorsPick: false,
        isWeeklyHot: false,
        createdAt: "2024-08-21T11:00:00Z",
    },
    {
        id: 258,
        title: "API 文件自動生成 (Swagger/OpenAPI)",
        description: "提供一段程式碼中的 API 控制器 (Controller)，AI 會為其生成符合 OpenAPI (Swagger) 3.0 格式的 YAML 文件。",
        content: "你是一位 API 文件專家。請將以下這段 [程式語言] 的 API 控制器程式碼，轉換為符合 OpenAPI 3.0 規範的 YAML 格式文件。請包含路徑、操作 (GET/POST)、參數、請求體和至少一個 200 成功回應的範例。\n\n```[程式語言]\n[請貼上你的 API 控制器程式碼]\n```",
        variables: ["[程式語言]", "[請貼上你的 API 控制器程式碼]"],
        roleCategory: '工程師',
        purposeCategory: '程式碼輔助',
        sourceUrl: "https://example.com/prompt/258",
        usageInstructions: "大幅加速 API 文件的撰寫過程，確保前後端協作的順暢。",
        exampleOutput: "```yaml\npaths:\n  /users/{userId}:\n    get:\n      summary: Get user by user ID\n      parameters:\n        - in: path\n          name: userId\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the user to get\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n```",
        tags: ["API", "OpenAPI", "Swagger", "文件自動化"],
        saves: 2150,
        isEditorsPick: true,
        isWeeklyHot: true,
        createdAt: "2024-08-21T12:00:00Z",
    },
    {
        id: 266,
        title: "錯誤訊息根本原因分析 (RCA)",
        description: "貼上一個程式錯誤訊息與堆疊追蹤 (Stack Trace)，AI 會分析可能的原因並提供除錯方向。",
        content: "你是一位資深的除錯專家。我的應用程式拋出了以下錯誤，請幫我分析這個錯誤的根本原因可能出在哪裡，並提供一個清晰的除錯步驟清單。\n\n**錯誤訊息與堆疊追蹤 (Stack Trace):**\n```\n[請貼上完整的錯誤訊息與堆疊追蹤]\n```",
        variables: ["[請貼上完整的錯誤訊息與堆疊追蹤]"],
        roleCategory: '工程師',
        purposeCategory: '程式碼輔助',
        sourceUrl: "https://example.com/prompt/266",
        usageInstructions: "當你卡在一個棘手的 Bug 時，讓 AI 提供第二個視角，或許就能豁然開朗。",
        exampleOutput: "**錯誤分析：`NullPointerException` at `com.example.UserService:15`**\n\n**可能原因分析：**\n這個 `NullPointerException` 發生在 `UserService` 的第 15 行。從堆疊追蹤來看，很可能是 `userRepository.findById(id)` 回傳了 `null` (也就是找不到該用戶)，而後續的程式碼 `user.getName()` 沒有處理這個 `null` 的情況，直接嘗試呼叫方法，導致了錯誤。\n\n**除錯步驟建議：**\n1.  **確認數據：** 檢查傳入的 `id` 是否有效？資料庫中是否真的存在該 `id` 的用戶？\n2.  **增加空值檢查：** 在呼叫 `user.getName()` 之前，先檢查 `user` 物件是否為 `null`。\n3.  **優化程式碼：** 可以使用 Java 的 `Optional` 來更優雅地處理可能為空的情況，例如：`userRepository.findById(id).orElseThrow(() -> new UserNotFoundException(id));`",
        tags: ["除錯", "Bug", "RCA", "Stack Trace"],
        saves: 2800,
        isEditorsPick: true,
        isWeeklyHot: true,
        createdAt: "2024-08-22T10:00:00Z",
    },
    {
        id: 267,
        title: "SQL 查詢效能優化建議",
        description: "分析一條慢查詢 (Slow Query) SQL，並從索引、JOIN、查詢條件等多方面提供具體的效能優化建議。",
        content: "你是一位資料庫管理員 (DBA)。我有一條執行效率很低的 SQL 查詢，請幫我分析並提出優化建議。\n\n**查詢語句 (Query):**\n```sql\n[請貼上你的慢查詢 SQL]\n```\n\n**相關表格結構 (Schema):**\n```sql\n[請提供相關表格的 CREATE TABLE 語句]\n```\n\n請從是否缺少索引、JOIN 寫法、WHERE 條件是否能用到索引等方面，提供至少三項具體的優化建議。",
        variables: ["[慢查詢 SQL]", "[表格 Schema]"],
        roleCategory: '工程師',
        purposeCategory: '程式碼輔助',
        sourceUrl: "https://example.com/prompt/267",
        usageInstructions: "把你的慢查詢交給 AI，幫你找出效能瓶頸，讓應用程式恢復流暢。",
        exampleOutput: "**SQL 查詢優化建議：**\n\n**原始查詢：** `SELECT * FROM orders o JOIN users u ON o.user_id = u.id WHERE u.email LIKE '%@example.com';`\n\n1.  **索引問題：** `orders` 表的 `user_id` 欄位和 `users` 表的 `id` 欄位都應該建立索引，以加速 JOIN 的速度。\n2.  **WHERE 條件問題：** `LIKE '%...'` 的寫法會導致索引失效，造成全表掃描。如果業務邏輯允許，應盡量避免前置萬用字元。如果需要全文檢索，應考慮使用專門的搜尋引擎如 Elasticsearch。\n3.  **SELECT * 問題：** 避免使用 `SELECT *`，應該明確列出需要的欄位，可以減少網路傳輸和資料庫的 I/O 負擔。",
        tags: ["SQL", "資料庫優化", "DBA", "效能"],
        saves: 2550,
        isEditorsPick: true,
        isWeeklyHot: false,
        createdAt: "2024-08-22T11:00:00Z",
    },
    {
        id: 276,
        title: "應用程式效能監控 (APM) 數據摘要",
        description: "從一段 APM 工具（如 New Relic, Datadog）的數據描述中，提煉出關鍵洞察與行動建議。",
        content: "你是一位網站可靠性工程師 (SRE)。以下是我們過去 24 小時的 APM 數據摘要：[請貼上 APM 數據描述，例如：平均回應時間上升 50%，錯誤率從 0.1% 升至 2%，CPU 使用率達到 80%，最慢的交易是 /api/v1/process]。\n\n請根據這些數據，為我撰寫一份簡要的分析報告，包含：\n1.  **問題摘要：** 目前系統最主要的效能問題是什麼？\n2.  **影響範圍：** 這個問題可能對哪些用戶或功能造成影響？\n3.  **潛在原因猜測：** 根據數據，最可能的原因是什麼？\n4.  **下一步行動建議：** 我們應該立即採取什麼措施來調查和解決問題？",
        variables: ["[APM 數據描述]"],
        roleCategory: '工程師',
        purposeCategory: '數據分析',
        sourceUrl: "https://example.com/prompt/276",
        usageInstructions: "幫助你快速從繁雜的監控數據中解讀出信號，並做出快速反應。",
        exampleOutput: "**APM 數據分析報告**\n\n1.  **問題摘要：** 系統整體回應時間顯著變慢，錯誤率急劇上升，CPU 資源緊張，其中 `/api/v1/process` 端點是效能瓶頸。\n2.  **影響範圍：** 所有需要處理數據的用戶都將感受到明顯的延遲，且有 2% 的機率會操作失敗。\n3.  **潛在原因：** 很可能是 `/api/v1/process` 最近有程式碼變更，引入了耗時的操作（如複雜的資料庫查詢或迴圈），導致 CPU 負載過高並影響了整體穩定性。\n4.  **下一步建議：**\n    - **立即行動：** 深入分析 `/api/v1/process` 的交易追蹤，找出最耗時的程式碼區段。\n    - **平行調查：** 檢查該端點相關的程式碼提交歷史，確認最近是否有相關變更。\n    - **短期緩解：** 如果有必要，考慮將該功能的流量暫時降級或回滾到上一個穩定版本。",
        tags: ["APM", "SRE", "監控", "效能分析"],
        saves: 2200,
        isEditorsPick: true,
        isWeeklyHot: true,
        createdAt: "2024-08-23T10:00:00Z",
    },
    {
        id: 286,
        title: "系統架構圖 Mermaid 語法產生器",
        description: "用自然語言描述一個系統的組件與關係，AI 會為你生成對應的 Mermaid.js 圖表語法。",
        content: "你是一位系統架構師。我想要繪製一個系統架構圖。請將我下面的文字描述，轉換成 Mermaid.js 的 `graph TD` (由上到下) 圖表語法。\n\n**系統描述：**\n[請用自然語言描述你的系統，例如：用戶透過瀏覽器訪問我們的負載均衡器。負載均衡器將流量轉發到我們的 Web 應用程式。Web 應用程式會讀寫一個 MySQL 資料庫，並呼叫一個第三方的支付 API。]",
        variables: ["[系統描述]"],
        roleCategory: '工程師',
        purposeCategory: '程式碼輔助',
        sourceUrl: "https://example.com/prompt/286",
        usageInstructions: "讓你用寫文字的方式來『畫』架構圖，非常適合快速在 Markdown 文件中嵌入圖表。",
        exampleOutput: "```mermaid\ngraph TD\n    A[用戶瀏覽器] --> B(負載均衡器);\n    B --> C{Web 應用程式};\n    C -- 讀寫 --> D[(MySQL 資料庫)];\n    C -- 呼叫 --> E[第三方支付 API];\n```",
        tags: ["Mermaid", "架構圖", "視覺化", "文件"],
        saves: 3100,
        isEditorsPick: true,
        isWeeklyHot: true,
        createdAt: "2024-08-24T10:00:00Z",
    },
    {
        id: 287,
        title: "C4 模型架構圖描述產生器",
        description: "引導使用者以 C4 模型（Context, Containers, Components, Code）的思維，來描述和視覺化軟體架構。",
        content: "請扮演一位軟體架構顧問。我想要使用 C4 模型來記錄我的系統 [系統名稱]。請先從最高層級的「系統情境圖 (System Context Diagram)」開始，引導我定義：\n1.  **核心系統：** 我們要描述的核心軟體系統是什麼？\n2.  **使用者 (Users):** 有哪些類型的使用者會與這個系統互動？\n3.  **外部系統 (External Systems):** 我們的系統會依賴或與哪些外部系統進行互動？\n4.  **關係：** 描述使用者、核心系統、外部系統之間的互動關係。\n最後，請將這些描述轉換為 PlantUML 或 Mermaid 的 C4 圖表語法。",
        variables: ["[系統名稱]"],
        roleCategory: '工程師',
        purposeCategory: '策略規劃',
        sourceUrl: "https://example.com/prompt/287",
        usageInstructions: "C4 模型是個強大的架構溝通工具，這個提示詞能幫助你由上而下地梳理複雜的系統。",
        exampleOutput: "**系統情境圖定義**\n\n1.  **核心系統：** 「網路銀行系統」\n2.  **使用者：** 「個人客戶」、「銀行行員」\n3.  **外部系統：** 「核心銀行主機」、「電子郵件系統」\n4.  **關係：** 個人客戶使用網路銀行系統來查詢餘額。網路銀行系統會從核心銀行主機獲取資料，並透過郵件系統發送通知。\n\n**PlantUML 語法：**\n```plantuml\n@startuml C4_Context\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\n\nPerson(customer, \"個人客戶\", \"...\")\nSystem(internet_banking, \"網路銀行系統\", \"...\")\nSystem_Ext(main_frame, \"核心銀行主機\", \"...\")\n\nRel(customer, internet_banking, \"使用\")\nRel(internet_banking, main_frame, \"獲取資料\")\n@enduml\n```",
        tags: ["C4 Model", "架構", "視覺化", "PlantUML", "文件"],
        saves: 2300,
        isEditorsPick: false,
        isWeeklyHot: false,
        createdAt: "2024-08-24T11:00:00Z",
    },
];
